"""
Content Generator Tool - Creates new blog content aligned with Google Cloud brand voice
"""
from typing import Dict, Any, List, Optional
from google.adk.tools import ToolContext
from ..prompts.brand_voice_instructions import CONTENT_GENERATOR_PROMPT


def generate_blog_content(
    topic: str,
    key_points: Optional[List[str]] = None,
    target_audience: str = "technical professionals",
    content_length: str = "medium",
    google_cloud_services: Optional[List[str]] = None,
    tool_context: Optional[ToolContext] = None
) -> Dict[str, Any]:
    """
    Generate a new blog post draft from scratch based on user's topic and key points.

    Args:
        topic: Main topic or title for the blog post
        key_points: List of key points to cover in the content
        target_audience: Target audience (technical professionals, executives, developers, etc.)
        content_length: Desired length (short: 400-800, medium: 800-1500, long: 1500+)
        google_cloud_services: List of GCP services to highlight
        tool_context: Google ADK tool context

    Returns:
        Dict containing generated blog content and metadata
    """
    if not topic or not topic.strip():
        return {
            "error": "Please provide a topic for the blog post",
            "content": "",
            "status": "error"
        }

    # Set defaults
    key_points = key_points or []
    google_cloud_services = google_cloud_services or []

    # Determine word count target
    word_count_targets = {
        "short": "400-800 words",
        "medium": "800-1500 words",
        "long": "1500+ words"
    }
    target_length = word_count_targets.get(content_length, "800-1500 words")

    # Construct the generation prompt
    generation_prompt = f"""
{CONTENT_GENERATOR_PROMPT}

## Content Brief:
**Topic:** {topic}
**Target Audience:** {target_audience}
**Target Length:** {target_length}

**Key Points to Cover:**
{chr(10).join(f"- {point}" for point in key_points) if key_points else "- [Let AI determine relevant points based on topic]"}

**Google Cloud Services to Highlight:**
{chr(10).join(f"- {service}" for service in google_cloud_services) if google_cloud_services else "- [Include relevant GCP services naturally]"}

## Additional Context:
- Solve real problems for the target audience
- Include practical examples and use cases
- Maintain Google Cloud's helpful, solution-oriented voice
- Structure content for easy scanning and reading
- Include a compelling introduction and clear conclusion

Please generate a complete blog post draft following these specifications.
"""

    try:
        # Use the tool context to get LLM response if available
        if tool_context and hasattr(tool_context, 'llm_client'):
            response = tool_context.llm_client.generate_content(generation_prompt)
            generated_content = response.text if hasattr(response, 'text') else str(response)
        else:
            # Fallback - return structured template
            generated_content = f"""
# {topic}

## Introduction
[Engaging hook that identifies the problem or opportunity]

[Brief context about why this topic matters to {target_audience}]

## Key Challenge/Opportunity
[Describe the main challenge or opportunity this post addresses]

## Solution Overview
[High-level approach to solving the problem]

### Key Benefits:
- [Benefit 1]
- [Benefit 2]
- [Benefit 3]

## Implementation Details
[Step-by-step guidance or detailed explanation]

### Example Use Case
[Specific example showing the solution in action]

## Google Cloud Integration
[Natural discussion of relevant GCP services and how they help]

## Best Practices
- [Best practice 1]
- [Best practice 2]
- [Best practice 3]

## Conclusion
[Summary of key takeaways and value proposition]

## Next Steps
[Clear call-to-action for readers]

---
*This content was generated by the Google Cloud Brand Voice Agent*
"""

        # Calculate basic metrics
        word_count = len(generated_content.split())
        estimated_read_time = max(1, round(word_count / 200))  # ~200 words per minute

        return {
            "content": generated_content,
            "topic": topic,
            "target_audience": target_audience,
            "word_count": word_count,
            "estimated_read_time": f"{estimated_read_time} min",
            "key_points_covered": len(key_points),
            "status": "completed",
            "metadata": {
                "content_length": content_length,
                "google_cloud_services": google_cloud_services,
                "generation_date": "generated"
            }
        }

    except Exception as e:
        return {
            "error": f"Content generation failed: {str(e)}",
            "content": "",
            "status": "error"
        }


def generate_content_outline(
    topic: str,
    target_audience: str = "technical professionals",
    tool_context: Optional[ToolContext] = None
) -> Dict[str, Any]:
    """
    Generate a structured outline for a blog post before writing full content.

    Args:
        topic: Main topic for the blog post
        target_audience: Target audience for the content
        tool_context: Google ADK tool context

    Returns:
        Dict containing structured outline and key sections
    """
    if not topic or not topic.strip():
        return {
            "error": "Please provide a topic for the outline",
            "outline": [],
            "status": "error"
        }

    outline_prompt = f"""
Create a detailed outline for a Google Cloud blog post on the topic: "{topic}"

Target Audience: {target_audience}

Please provide:
1. A compelling working title
2. Hook/opening angle
3. 4-6 main sections with subsections
4. Key takeaways for each section
5. Suggested Google Cloud services to mention
6. Call-to-action ideas

Format as a structured outline that a content creator can follow.
"""

    try:
        if tool_context and hasattr(tool_context, 'llm_client'):
            response = tool_context.llm_client.generate_content(outline_prompt)
            outline_content = response.text if hasattr(response, 'text') else str(response)
        else:
            # Fallback structured template
            outline_content = f"""
# Blog Post Outline: {topic}

## Working Title Options:
1. [Title option 1]
2. [Title option 2]
3. [Title option 3]

## Hook/Opening Angle:
[Compelling opening that identifies audience problem/opportunity]

## Main Sections:

### 1. Introduction & Problem Statement
- Define the challenge for {target_audience}
- Why this matters now
- What readers will learn

### 2. [Core Concept/Solution]
- Key principles
- Benefits overview
- Success metrics

### 3. [Implementation/Technical Details]
- Step-by-step approach
- Best practices
- Common pitfalls to avoid

### 4. Google Cloud Integration
- Relevant GCP services
- How they solve the problem
- Integration considerations

### 5. Real-World Examples
- Use case scenarios
- Customer success stories
- Practical applications

### 6. Conclusion & Next Steps
- Key takeaways summary
- Recommended actions
- Additional resources

## Suggested GCP Services to Mention:
- [Service 1]: [How it relates]
- [Service 2]: [How it relates]
- [Service 3]: [How it relates]

## Call-to-Action Ideas:
- Try GCP free tier
- Read related documentation
- Contact sales team
- Join community forums
"""

        return {
            "outline": outline_content,
            "topic": topic,
            "target_audience": target_audience,
            "sections_count": 6,
            "status": "completed"
        }

    except Exception as e:
        return {
            "error": f"Outline generation failed: {str(e)}",
            "outline": "",
            "status": "error"
        }